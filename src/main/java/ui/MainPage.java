package ui;

import app.App;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import debugger.DHelper;
import model.Student;
import util.Display;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import static javax.swing.SwingUtilities.invokeLater;

/**
 * @author kamontat
 * @version 1.0
 * @since Sat 29/Jul/2017 - 10:47 PM
 */
public class MainPage extends JFrame {
	private JPanel contentPane;
	
	private JTextField sid_field;
	private JComboBox<Student> studentsCB;
	private JButton randBtn;
	private JButton saveButton;
	private JButton changeLangBtn;
	private JLabel sizeLb;
	
	private App app = new App();
	
	private MainPage() throws HeadlessException {
		setContentPane(contentPane);
		
		refresh();
		sid_field.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				refresh();
			}
		});
		
		randBtn.addActionListener(e -> {
			Student s = studentsCB.getItemAt(studentsCB.getSelectedIndex());
			DHelper.INSTANCE.log("start random: " + s);
			if (s == null)
				JOptionPane.showMessageDialog(this, "currently student not exist", "Student Not Exist", JOptionPane.ERROR_MESSAGE);
			else ResultGroup.run(this, app.randomGroup(s));
			refresh();
		});
		
		changeLangBtn.addActionListener(e -> {
			if (changeLangBtn.getText().contains("ENG")) changeLangBtn.setText("to THAI");
			else changeLangBtn.setText("to ENG");
			
			refresh();
		});
		
		saveButton.addActionListener(e -> {
			DHelper.INSTANCE.log("start save");
			app.save();
		});
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				DHelper.INSTANCE.log("window on close");
				int result = JOptionPane.showConfirmDialog(MainPage.this, "do you want to save", "warnning not save?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
				if (result == JOptionPane.YES_OPTION) app.save();
				// show result
				JOptionPane.showMessageDialog(MainPage.this, app.getSummary(), "Summary", JOptionPane.INFORMATION_MESSAGE);
			}
		});
	}
	
	private void refresh() {
		studentsCB.firePopupMenuCanceled();
		studentsCB.removeAllItems();
		app.getStudent(sid_field.getText()).forEach(student -> {
			DHelper.INSTANCE.log(student.toString());
			student.setLang(changeLangBtn.getText().contains("ENG") ? 1: 0);
			studentsCB.addItem(student);
		});
		
		sizeLb.setText("(" + studentsCB.getItemCount() + "): ");
	}
	
	private void compile(Window old) {
		pack();
		setMinimumSize(new Dimension(getWidth(), getHeight()));
		setLocation(Display.INSTANCE.getCenterPage(old, this));
		setVisible(true);
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	}
	
	public static void run(final Window oldPage) {
		invokeLater(() -> new MainPage().compile(oldPage));
	}
	
	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}
	
	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
		final JLabel label1 = new JLabel();
		label1.setText("Student ID");
		contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sid_field = new JTextField();
		contentPane.add(sid_field, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		studentsCB = new JComboBox();
		Font studentsCBFont = this.$$$getFont$$$("Petrona", -1, -1, studentsCB.getFont());
		if (studentsCBFont != null) studentsCB.setFont(studentsCBFont);
		contentPane.add(studentsCB, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		randBtn = new JButton();
		randBtn.setText("RANDOM");
		contentPane.add(randBtn, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		saveButton = new JButton();
		saveButton.setText("Save");
		contentPane.add(saveButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		changeLangBtn = new JButton();
		changeLangBtn.setText("to ENG");
		contentPane.add(changeLangBtn, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sizeLb = new JLabel();
		sizeLb.setText("(0): ");
		contentPane.add(sizeLb, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}
	
	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style: currentFont.getStyle(), size >= 0 ? size: currentFont.getSize());
	}
	
	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}